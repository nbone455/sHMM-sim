for(i in 1:length(dat$Species)) {
if(is.na(dat$m3.md[i]) == TRUE){
pres[[i]] <- 0
names[[i]] <- dat$Species[i]
} else {
pres[[i]] <- 1
names[[i]] <- dat$Species[i]
}
}
p_dat <- data.frame(unlist(pres))
p_dat$species <- unlist(names)
colnames(p_dat) <- c("pres.m3", "taxa")
head(p_dat)
# need to ratio the same spp.
count_ratio <- list()
sp <- unique(p_dat$taxa)
for(k in 1:length(sp)) {
t <- filter(p_dat, taxa == sp[k])
if(0 %in% t$pres.m3 == TRUE){
count_ratio[k] <- length(which(t$pres.m3 ==0)) / length(t$pres.m3)
print(k)
} else {
count_ratio[k] <- 1
#print("one")
}
}
counts <- data.frame(unlist(count_ratio))
counts$taxa <- unlist(sp)
colnames(counts) <- c("ratio", "taxa")
head(counts)
d_dat <- case_when(
counts$ratio < 1 ~ 0,
counts$ratio == 1 ~ 1
)
thresh_dat <- case_when(
d_dat$pres == 1 ~ "3&4",
d_dat$pres == 0 ~ "1&2"
)
str(counts)
str(p_dat)
if(name_column=="detect"){
if(is.null(rownames(data))){
tmp.df <- data.frame(data)
offset <- 0
} else {
tmp.df <- data.frame(rownames(data), data)
offset <- 1
}
matches <- sapply(tmp.df, function(x) sum(x %in% tree$tip.label))
if(all(matches==0)) stop("No matching names found between data and tree")
name_column <- which(matches==max(matches))-offset
} else{
if(is.character(name_column)){
name_column <- which(name_column==coln)[1]
}
}
make.treedata <- function(tree, data, name_column="detect", as.is=FALSE) {
if(!inherits(tree, "phylo")) stop("tree must be of class 'phylo'")
if(is.vector(data)){
data <- as.matrix(data)
colnames(data) <- "trait"
}
if(is.null(colnames(data))){
colnames(data) <- paste("trait", 1:ncol(data), sep="")
}
coln <- colnames(data)
if(name_column=="detect"){
if(is.null(rownames(data))){
tmp.df <- data.frame(data)
offset <- 0
} else {
tmp.df <- data.frame(rownames(data), data)
offset <- 1
}
matches <- sapply(tmp.df, function(x) sum(x %in% tree$tip.label))
if(all(matches==0)) stop("No matching names found between data and tree")
name_column <- which(matches==max(matches))-offset
} else{
if(is.character(name_column)){
name_column <- which(name_column==coln)[1]
}
}
dat <- as_tibble(as.data.frame(lapply(1:ncol(data), function(x)
type.convert(apply(data[,x, drop=FALSE], 1, as.character), as.is=as.is))))
colnames(dat) <- coln
if(name_column==0){
clnm <- colnames(dat)
dat <- dat[,clnm, drop=FALSE]
dat.label <- as.character(rownames(data))
} else {
if(is.numeric(name_column)){
clnm <- (1:ncol(data))[-name_column]
} else {
clnm <- colnames(dat)[-which(colnames(dat)==name_column)]
}
dat <- dat[, clnm, drop=FALSE]
dat.label <- as.character(as.data.frame(data)[[name_column]])
}
data_not_tree <- setdiff(dat.label, tree$tip.label)
tree_not_data <- setdiff(tree$tip.label, dat.label)
phy <- drop.tip(tree, tree_not_data)
dat <- filter(dat, dat.label %in% phy$tip.label)
dat.label <- dat.label[dat.label %in% phy$tip.label]
if(any(duplicated(dat.label))){
warning("Duplicated data in dataset, selecting first unique entry for each species")
dat <- filter(dat, !duplicated(dat.label))
dat.label <- dat.label[!duplicated(dat.label)]
}
...my.order... <- match(dat.label, phy$tip.label)
dat <- arrange(dat, ...my.order...)
td <- list(phy=phy, dat=dat)
class(td) <- c("treedata", "list")
attributes(td)$tip.label <- phy$tip.label
#attributes(td$dat)$row.names <- phy$tip.label
attributes(td)$dropped <- list(dropped_from_tree=data_not_tree,dropped_from_data=tree_not_data)
#Removing rownames for future versions of dplyr
#rownames(td$dat) <- attributes(td)$tip.label
return(td)
}
# putting presence / absence on a tree
p_td <- make.treedata(prim_tree, data = p_dat)
p_td
head(p_td$dat)
head(p_td$phy)
library(phytools)
library(ggplot2)
library(tidyverse)
# Plot the tree with presence/absence data
# First, basic phylogeny plot with M3 states
pdf("primate_m3.pdf", width=12, height=8)
# Set up plotting area for two plots side by side
par(mfrow=c(1,1))
# Extract the presence/absence data as a vector
m3_states <- p_td$dat$pres.m3
# Create colors for states (0 = absence, 1 = presence)
state_cols <- c("red", "blue")[m3_states + 1]
# Plot tree with colored tips
plot(p_td$phy, show.tip.label=TRUE, cex=0.7,
main="M3 Presence/Absence in Primates")
tiplabels(pch=19, col=state_cols)
# Add legend
legend("topright",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
dev.off()
#Empirical example
# corhmm 4 state vs thresh 4 state
# whats the threshold trait here?
library(ape)
#prim_tree <- read.nexus("tree.nex")
prim_tree <- read.nexus("prim_10k.nex")
#prim_tree <- read.nexus("tree.nex")
prim_tree <- read.nexus("../data/prim_10k.nex")
# primate dataset
#dat <- read.csv("Plavcan_Lower Molar_All.csv")
# try with these, use the ratio as cutoff
dat <- read.csv("Plavcan_Lower Molar_All.csv")
head(dat)
new_dat <- dat
new_dat[is.na(new_dat)] <- 0
#lets try this loop still
pres <- list()
names <- list()
for(i in 1:length(new_dat$Row.names)) {
if(is.na(new_dat$m3.md[i]) == TRUE || new_dat$m3.md[i] == 0){
pres[[i]] <- 0
names[[i]] <- new_dat$Row.names[i]
} else {
pres[[i]] <- 1
names[[i]] <- new_dat$Row.names[i]
}
}
p_dat <- data.frame(unlist(pres))
p_dat$species <- unlist(names)
colnames(p_dat) <- c("pres.m3", "taxa")
library(phytools)
library(ggplot2)
library(patchwork)
install.packages("patchwork")
library(dplyr)
library(ape)
library(treeplyr)
setwd("~/Documents/hiThresh power")
setwd("~/Documents/WORK/sHMM-sim/empircalExample/R")
#prim_tree <- read.nexus("tree.nex")
prim_tree <- read.nexus(file = "../data/prim_10k.nex")
# primate dataset
#dat <- read.csv("Plavcan_Lower Molar_All.csv")
# try with these, use the ratio as cutoff
dat <- read.csv("../Data_edited species names.csv")
# primate dataset
#dat <- read.csv("Plavcan_Lower Molar_All.csv")
# try with these, use the ratio as cutoff
dat <- read.csv("../data//Data_edited species names.csv")
head(dat)
dat[is.na(dat)] <- 0
# seein the ratio
attempt <- dat
attempt <- mutate(attempt, ratio = (m3.md) / (m1.md))
hist(attempt$ratio, main = "distribution of molar ratios across primates", xlab = "molar 3 / molar 1 ratio")
dat <- attempt
# threshold decision
set.seed(1001203)
stored <- list()
threshs <- list()
# define better thresholds
se <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.70, 0.80, 0.9, 1)
png(file = "threshold_cutoffs.png", width = 20000, height = 800)  # Adjust the width and height as needed
par(mfrow = c(2, 5))  # Adjust the number of rows and columns based on the number of cutoffs
hist_list <- list()
for(j in 1:length(se)) {
pres <- list()
names <- list()
cutoff <- se[j]
for(i in 1:length(dat$Row.names)) {
if(dat$ratio[i] <= cutoff){
pres[[i]] <- 0
names[[i]] <- dat$Row.names[i]
} else {
pres[[i]] <- 1
names[[i]] <- dat$Row.names[i]
}
}
p_dat <- data.frame(unlist(pres))
p_dat$species <- unlist(names)
colnames(p_dat) <- c("pres.m3", "taxa")
# flipping columns
p_dat <- p_dat[,c(2,1)]
stored[[j]] <- as.vector(p_dat$pres.m3)
x <- data.frame(dat$Row.names, dat$ratio, stored[[j]])
threshs[[j]] <- x
hist_list[[j]] <- hist(threshs[[j]]$dat.ratio, main = paste("Cutoff:", cutoff), xlab = "Presence/Absence", ylab = "Frequency")
abline(v = se[j], col = "red", lwd = 2)
}
for(j in 1:length(se)) {
hist_list[[j]]
}
dev.off()
# Make threshold data function
make_threshold_data <- function(tree, data, cutoff) {
pres <- numeric(length(data$Row.names))
names <- character(length(data$Row.names))
for(i in 1:length(data$Row.names)) {
if(data$ratio[i] <= cutoff){
pres[i] <- 0
names[i] <- data$Row.names[i]
} else {
pres[i] <- 1
names[i] <- data$Row.names[i]
}
}
p_dat <- data.frame(taxa = names, pres.m3 = pres)
return(p_dat)
}
# Set up PDF for output
pdf("threshold_trees.pdf", width=20, height=15)
# Set up plotting area for multiple trees
par(mfrow=c(3,4))
# Vector of thresholds
se <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.70, 0.80, 0.9, 1)
# Plot each threshold
for(i in 1:length(se)) {
# Create data for this threshold
thresh_data <- make_threshold_data(prim_tree, dat, se[i])
# Create treedata object
td <- make.treedata(prim_tree, thresh_data)
# Set up the factor for plotting
state_factor <- factor(td$dat$pres.m3)
names(state_factor) <- td$phy$tip.label
# Plot tree
plot(td$phy, show.tip.label=FALSE, main=paste0("Threshold: ", se[i]))
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend to first plot only
if(i == 1) {
legend("topright",
legend=c("Absent", "Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
}
# Print proportion of each state
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1, cex=0.7)
}
dev.off()
library(phytools)
library(ggplot2)
library(patchwork)
# Make threshold data function
make_threshold_data <- function(tree, data, cutoff) {
pres <- numeric(length(data$Row.names))
names <- character(length(data$Row.names))
for(i in 1:length(data$Row.names)) {
if(data$ratio[i] <= cutoff){
pres[i] <- 0
names[i] <- data$Row.names[i]
} else {
pres[i] <- 1
names[i] <- data$Row.names[i]
}
}
p_dat <- data.frame(taxa = names, pres.m3 = pres)
return(p_dat)
}
# Set up PDF for output
pdf("threshold_trees.pdf", width=20, height=15)
# Set up plotting area for multiple trees
par(mfrow=c(3,4))
# Vector of thresholds
se <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.70, 0.80, 0.9, 1)
# Plot each threshold
for(i in 1:length(se)) {
# Create data for this threshold
thresh_data <- make_threshold_data(prim_tree, dat, se[i])
# Create treedata object
td <- make.treedata(prim_tree, thresh_data)
# Set up the factor for plotting
state_factor <- factor(td$dat$pres.m3)
names(state_factor) <- td$phy$tip.label
# Plot tree
plot(td$phy, show.tip.label=FALSE, main=paste0("Threshold: ", se[i]))
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend to first plot only
if(i == 1) {
legend("topright",
legend=c("Absent", "Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
}
# Print proportion of each state
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1, cex=0.7)
}
dev.off()
# Create summary information
threshold_summary <- data.frame(
Threshold = se,
n_present = numeric(length(se)),
n_absent = numeric(length(se)),
prop_present = numeric(length(se))
)
for(i in 1:length(se)) {
thresh_data <- make_threshold_data(prim_tree, dat, se[i])
tab <- table(thresh_data$pres.m3)
threshold_summary$n_absent[i] <- tab["0"]
threshold_summary$n_present[i] <- tab["1"]
threshold_summary$prop_present[i] <- tab["1"] / sum(tab)
}
print(threshold_summary)
library(phytools)
# Pick a threshold (e.g., 0.7)
threshold <- 0.7
# Create presence/absence data for this threshold
pres <- numeric(length(dat$Row.names))
names <- character(length(dat$Row.names))
for(i in 1:length(dat$Row.names)) {
if(dat$ratio[i] <= threshold){
pres[i] <- 0
names[i] <- dat$Row.names[i]
} else {
pres[i] <- 1
names[i] <- dat$Row.names[i]
}
}
# Create data frame
p_dat <- data.frame(taxa = names, pres.m3 = pres)
# Make treedata object
td <- make.treedata(prim_tree, p_dat)
# Create factor for states
state_factor <- factor(td$dat$pres.m3)
names(state_factor) <- td$phy$tip.label
# Plot tree
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("topright",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
library(phytools)
# Pick a threshold (e.g., 0.7)
threshold <- 0.7
# Create presence/absence data for this threshold
pres <- numeric(length(dat$Row.names))
names <- character(length(dat$Row.names))
for(i in 1:length(dat$Row.names)) {
if(dat$ratio[i] <= threshold){
pres[i] <- 0
names[i] <- dat$Row.names[i]
} else {
pres[i] <- 1
names[i] <- dat$Row.names[i]
}
}
# Create data frame
p_dat <- data.frame(taxa = names, pres.m3 = pres)
# Make treedata object
td <- make.treedata(prim_tree, p_dat)
# Create factor for states
state_factor <- factor(td$dat$pres.m3)
names(state_factor) <- td$phy$tip.label
# Plot tree
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("bottomleft",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
Plot tree
# Plot tree
pdf("single_thresh", width=20, height=15)
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("bottomleft",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
# Plot tree
pdf("single_thresh", width=20, height=15)
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("bottomleft",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
dev.off()
# Plot tree
pdf("single_thresh.pdf", width=20, height=15)
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("bottomleft",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
dev.off()
# Plot tree
pdf("single_thresh.pdf", width=10, height=9)
plot(td$phy, show.tip.label=FALSE,
main=paste0("M3 Presence/Absence (Threshold = ", threshold, ")"))
# Add colored tip points
cols <- c("red", "blue")[as.numeric(state_factor)]
tiplabels(pch=19, col=cols, cex=0.8)
# Add legend
legend("bottomleft",
legend=c("M3 Absent", "M3 Present"),
pch=19,
col=c("red", "blue"),
cex=0.8)
# Add proportion information
prop_table <- table(state_factor)/length(state_factor)
mtext(paste0("Absent: ", round(prop_table[1]*100, 1), "%",
" Present: ", round(prop_table[2]*100, 1), "%"),
side=1, line=1)
dev.off()
